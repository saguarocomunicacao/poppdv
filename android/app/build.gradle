apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

apply plugin: "com.android.application"
apply from: '../../node_modules/react-native-unimodules/gradle.groovy'
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle");

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults.
 *
 * Warning: If you set jsBundleDir{Debug|Release}, packaging the bundle into assets may not work
 * as expected, because the following workaround doesn't apply in that case:
 * https://github.com/facebook/react-native/pull/21408
 */

final bundleInDebug = hasProperty("bundleInDebug") && Boolean.valueOf(property("bundleInDebug"))
final useDevSupport = !bundleInDebug

project.ext.react = [
    // The name of the generated asset file containing your JS bundle
    bundleAssetName: "index.bundle",

    // The entry file for bundle generation
    entryFile: "index.js",

    // Whether to bundle JS and assets in debug mode. Set this to false if you want to load
    // JavaScript from a bundler, true if you want to embed the bundle in the apk.
    // Do not change it here; change the property value in gradle.properties instead.
    bundleInDebug  : bundleInDebug,

    // Whether to bundle JS and assets in release mode
    bundleInRelease: true,

    enableHermes: false,

    // Whether to bundle JS and assets in another build variant (if configured).
    // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
    // The configuration property can be in the following formats
    //         'bundleIn${productFlavor}${buildType}'
    //         'bundleIn${buildType}'
    // bundleInBeta: true,

    // The root of your project, i.e. where "package.json" lives
    // root: "../../",

    // Where to put the JS bundle asset in debug mode
    // jsBundleDirDebug: "$buildDir/intermediates/assets/debug",

    // Where to put the JS bundle asset in release mode
    // jsBundleDirRelease: "$buildDir/intermediates/assets/release",

    // Where to put drawable resources / React Native assets, e.g. the ones you use via
    // require('./image.png')), in debug mode
    // resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",

    // Where to put drawable resources / React Native assets, e.g. the ones you use via
    // require('./image.png')), in release mode
    // resourcesDirRelease: "$buildDir/intermediates/res/merged/release",

    // By default the gradle tasks are skipped if none of the JS files or assets change; this means
    // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
    // date; if you have any other folders that you want to ignore for performance reasons (gradle
    // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
    // for example, you might want to remove it from here.
    // inputExcludes: ["android/**", "ios/**"],

    // Override which node gets called and with what additional arguments
    // nodeExecutableAndArgs: ["node"],

    // Supply additional arguments to the packager
    // extraPackagerArgs: []
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create separate APKs instead of one:
 *   - An APK that only works on 32-bit ARM devices
 *   - An APK that only works on 64-bit ARM devices
 *   - An APK that only works on 32-bit x86 devices
 *   - An APK that only works on 64-bit x86 devices
 * This reduces the size of the APK.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
final enableSeparateBuildPerCPUArchitecture = false

/**
 * For each separate APK per architecture, set a unique version code as described here:
 * https://developer.android.com/studio/build/configure-apk-splits.html
 */
final versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]
final abis = versionCodes.keySet().toArray(new String[versionCodes.size()])

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
final enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.sdkVersion

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        applicationId 'br.com.popingressospdv'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.sdkVersion
        versionCode rootProject.ext.projectVersionCode
        versionName rootProject.ext.projectVersionName
        missingDimensionStrategy 'react-native-camera', 'general'
        ndk {
            abiFilters abis
        }
        vectorDrawables.useSupportLibrary = true

        buildConfigField 'String', 'REACT_NATIVE_VERSION', "\"$rootProject.ext.reactNativeVersion\""
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false // If true, also generate a universal APK
            include abis
        }
    }

    compileOptions {
      sourceCompatibility 1.8
      targetCompatibility 1.8
    }

    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }

        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'USE_DEVELOPER_SUPPORT', "$useDevSupport"
            signingConfig signingConfigs.release
            //signingConfig signingConfigs.gertec
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'boolean', 'USE_DEVELOPER_SUPPORT', 'false'
            signingConfig signingConfigs.release
            //signingConfig signingConfigs.gertec
        }
    }

    // applicationVariants examples: debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            final abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    // Ensure that the JavaScript bundle is included in the APK:
    sourceSets {
        main {
            debug {
                if (bundleInDebug) {
                    assets.srcDirs += "$buildDir/intermediates/assets/debug"
                }
            }
            release {
                assets.srcDirs += "$buildDir/intermediates/assets/release"
            }
        }
    }
}

dependencies {
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.10'

    implementation project(':react-native-onesignal')
    implementation project(':react-native-camera')
    implementation project(':react-native-svg')
    implementation project(':react-native-permissions')
    implementation project(':react-native-device-info')
    implementation project(':react-native-community-netinfo')
    implementation project(':react-native-maps')
    implementation project(':react-native-geolocation-service')
    implementation project(':react-native-sound')
    implementation project(':react-native-spinkit')
    implementation project(':react-native-image-picker')
    implementation project(':react-native-webview')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-video')
    implementation project(':@react-native-async-storage')
    implementation project(path: ':@react-native-picker_picker')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-audio-recorder-player')
    implementation project(':@react-native-community_slider')
    implementation project(":react-native-google-signin")
    implementation project(path: ":@react-native-firebase_app")
    implementation project(':react-native-fbsdk-next')
    implementation project(':react-native-share')
    implementation project(':react-native-bluetooth-escpos-printer')
    implementation project(':react-native-fs')

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.1'

    implementation(name: 'sdk_3.0_release', ext: 'aar')
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

    testImplementation 'junit:junit:4.12'
    implementation('com.journeyapps:zxing-android-embedded:3.4.0')
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'me.dm7.barcodescanner:zxing:1.9.8'
    implementation ('com.journeyapps:zxing-android-embedded:3.4.0')
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.android.material:material:1.1.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:26.+'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.android.support:support-annotations:28.0.0'

    implementation 'com.facebook.react:react-native:+'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'com.facebook.fresco:animated-gif:2.0.0'
    addUnimodulesDependencies()

    implementation 'androidx.annotation:annotation:1.1.0'
    annotationProcessor 'androidx.annotation:annotation:1.1.0'

    implementation 'com.onesignal:OneSignal:[4.0.0, 4.99.99]'

    implementation(project(':react-native-maps')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    implementation 'com.google.android.gms:play-services-base:12.0.1'
    implementation 'com.google.android.gms:play-services-maps:12.0.1'

    implementation 'com.android.support:design:28.0.0'
    implementation 'br.com.uol.pagseguro.plugpagservice.wrapper:wrapper:1.15.3'

    implementation 'io.reactivex.rxjava2:rxjava:2.1.16'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

     implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    //noinspection GradleDynamicVersion
    implementation 'org.webkit:android-jsc:+'
}

apply plugin: 'com.google.gms.google-services'
