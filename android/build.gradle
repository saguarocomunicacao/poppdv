import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.9, 0.99.99]'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.0"
        classpath 'com.google.gms:google-services:4.1.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

final reactNativePath = '/react-native/android'
final jscAndroidPath = '/jsc-android/dist'

def REACT_NATIVE_VERSION = new File(['node', '--print',"JSON.parse(require('fs').readFileSync(require.resolve('react-native/package.json'), 'utf-8')).version"].execute(null, rootDir).text.trim())

allprojects {
    configurations.all {
        resolutionStrategy {
            // Remove this override in 0.65+, as a proper fix is included in react-native itself.
            force "com.facebook.react:react-native:" + REACT_NATIVE_VERSION
        }
    }
    repositories {
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com' }
        maven { url 'https://github.com/pagseguro/PlugPagServiceWrapper/raw/master' }
        maven { url "$rootDir/../node_modules/react-native/android" } // Gradle Plugin Portal
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url findNodeModules() + reactNativePath
        }

        maven {
            // Android JSC is installed from npm
            url findNodeModules() + jscAndroidPath
        }

        flatDir {
            dirs 'libs'
        }

        google()
        mavenCentral()
        jcenter()
    }
    subprojects {
        afterEvaluate {
            project ->
                if (project.hasProperty("android")) {
                    android {
                        compileSdkVersion = 31
                        buildToolsVersion = "30.0.0"
                    }
                }
        }
    }
}

final findNodeModules() {
    final reactNativePath = 'node_modules'
    final notFoundMessage = 'Unable to find node_modules folder. Have you run yarn from the root?'

    def root = file("$rootDir")
    if (root == null) {
        throw new GradleException(notFoundMessage)
    }

    def reactNativeDir = new File(root, reactNativePath)
    while (!reactNativeDir.exists()) {
        root = root.parentFile
        if (root == null) {
            throw new GradleException(notFoundMessage)
        }

        reactNativeDir = new File(root, reactNativePath)
    }

    return reactNativeDir.toString()
}

ext {
    googlePlayServicesIidVersion = "17.0.0"
    googlePlayServicesAuthVersion = "16.0.1"
    playServicesVersion = "17.0.0"

    compileSdkVersion = 31
    targetSdkVersion = 30
    supportLibVersion = "30.0.0"
    kotlinVersion = '1.5.0'

    sdkVersion = 31
    minSdkVersion = 22
    projectVersionName = getProjectVersionName()
    projectVersionCode = Integer.parseInt(getProjectVersion())
    reactNativeVersion = getReactNativeVersion()
}

/**
 * Get the React Native version from package.json
 */
final getReactNativeVersion() {
    final json = new JsonSlurper()
    final packageJsonFile = file('../package.json')
    if (!packageJsonFile.exists()) {
        throw new Exception('No package.json found')
    }

    final packageJson = json.parse packageJsonFile
    def version = packageJson.dependencies."react-native"
    if (!version) {
        throw new Exception('No react native version found in package.json dependencies')
    }

    println "React native version: $version"

    if (version.startsWith('^')) {
        version = version.substring(1)
    }

    return version
}

/**
 * Get the Project versionName from package.json
 */
final getProjectVersionName() {
    final json = new JsonSlurper()
    final packageJsonFile = file('../package.json')
    if (!packageJsonFile.exists()) {
        throw new Exception('No package.json found')
    }

    final packageJson = json.parse packageJsonFile
    def versionName = packageJson.versionName
    if (!versionName) {
        throw new Exception('No project versionName found in package.json')
    }

    println "Project versionName: $versionName"

    return versionName
}

/**
 * Get the Project version from package.json
 */
final getProjectVersion() {
    final json = new JsonSlurper()
    final packageJsonFile = file('../package.json')
    if (!packageJsonFile.exists()) {
        throw new Exception('No package.json found')
    }

    final packageJson = json.parse packageJsonFile
    def version = packageJson.version
    if (!version) {
        throw new Exception('No project version found in package.json')
    }

    println "Project version: $version"

    return version
}
